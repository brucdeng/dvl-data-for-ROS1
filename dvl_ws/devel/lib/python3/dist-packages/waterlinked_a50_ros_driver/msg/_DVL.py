# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from waterlinked_a50_ros_driver/DVL.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import waterlinked_a50_ros_driver.msg

class DVL(genpy.Message):
  _md5sum = "dea1debc1aca7804a62c507714ec3777"
  _type = "waterlinked_a50_ros_driver/DVL"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
#Time
float64 time
#Measured velocity [m/s]
geometry_msgs/Vector3 velocity
#Figure of Merit
float64 fom
#Altitude of the sensor
float64 altitude
#Beams/Transducers
DVLBeam[] beams
#Validity of velocity
bool velocity_valid
#Status message
int64 status
#Formatting of json
string form

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: waterlinked_a50_ros_driver/DVLBeam
#Transducer ID
int64 id
#Velocity reported by transducer
float64 velocity
#Distance value
float64 distance
#RSSI
float64 rssi
#NSD
float64 nsd
#Report if beam is locked on and providing reliable data
bool valid
"""
  __slots__ = ['header','time','velocity','fom','altitude','beams','velocity_valid','status','form']
  _slot_types = ['std_msgs/Header','float64','geometry_msgs/Vector3','float64','float64','waterlinked_a50_ros_driver/DVLBeam[]','bool','int64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time,velocity,fom,altitude,beams,velocity_valid,status,form

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DVL, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time is None:
        self.time = 0.
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.fom is None:
        self.fom = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.beams is None:
        self.beams = []
      if self.velocity_valid is None:
        self.velocity_valid = False
      if self.status is None:
        self.status = 0
      if self.form is None:
        self.form = ''
    else:
      self.header = std_msgs.msg.Header()
      self.time = 0.
      self.velocity = geometry_msgs.msg.Vector3()
      self.fom = 0.
      self.altitude = 0.
      self.beams = []
      self.velocity_valid = False
      self.status = 0
      self.form = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.time, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.fom, _x.altitude))
      length = len(self.beams)
      buff.write(_struct_I.pack(length))
      for val1 in self.beams:
        _x = val1
        buff.write(_get_struct_q4dB().pack(_x.id, _x.velocity, _x.distance, _x.rssi, _x.nsd, _x.valid))
      _x = self
      buff.write(_get_struct_Bq().pack(_x.velocity_valid, _x.status))
      _x = self.form
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.beams is None:
        self.beams = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.time, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.fom, _x.altitude,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.beams = []
      for i in range(0, length):
        val1 = waterlinked_a50_ros_driver.msg.DVLBeam()
        _x = val1
        start = end
        end += 41
        (_x.id, _x.velocity, _x.distance, _x.rssi, _x.nsd, _x.valid,) = _get_struct_q4dB().unpack(str[start:end])
        val1.valid = bool(val1.valid)
        self.beams.append(val1)
      _x = self
      start = end
      end += 9
      (_x.velocity_valid, _x.status,) = _get_struct_Bq().unpack(str[start:end])
      self.velocity_valid = bool(self.velocity_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.form = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.form = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.time, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.fom, _x.altitude))
      length = len(self.beams)
      buff.write(_struct_I.pack(length))
      for val1 in self.beams:
        _x = val1
        buff.write(_get_struct_q4dB().pack(_x.id, _x.velocity, _x.distance, _x.rssi, _x.nsd, _x.valid))
      _x = self
      buff.write(_get_struct_Bq().pack(_x.velocity_valid, _x.status))
      _x = self.form
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.beams is None:
        self.beams = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.time, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.fom, _x.altitude,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.beams = []
      for i in range(0, length):
        val1 = waterlinked_a50_ros_driver.msg.DVLBeam()
        _x = val1
        start = end
        end += 41
        (_x.id, _x.velocity, _x.distance, _x.rssi, _x.nsd, _x.valid,) = _get_struct_q4dB().unpack(str[start:end])
        val1.valid = bool(val1.valid)
        self.beams.append(val1)
      _x = self
      start = end
      end += 9
      (_x.velocity_valid, _x.status,) = _get_struct_Bq().unpack(str[start:end])
      self.velocity_valid = bool(self.velocity_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.form = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.form = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_Bq = None
def _get_struct_Bq():
    global _struct_Bq
    if _struct_Bq is None:
        _struct_Bq = struct.Struct("<Bq")
    return _struct_Bq
_struct_q4dB = None
def _get_struct_q4dB():
    global _struct_q4dB
    if _struct_q4dB is None:
        _struct_q4dB = struct.Struct("<q4dB")
    return _struct_q4dB
